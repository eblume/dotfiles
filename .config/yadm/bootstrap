#!/bin/bash

set -o xtrace
set -o nounset
set -o errexit

### TO USE: `yadm bootstrap` - fully idempotent and intended to be run often to get upgrades, etc.
# To bootstrap from 0, you must first install yadm.
# https://yadm.io/docs/install
# On Mac OS, the typical process is:
#  1. /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
#  2. brew install yadm
#  3. yadm clone <DOTFILES REPO HERE>
#  4. yadm bootstrap
#
# (on non-Mac OS, you just need to replace steps 1 and 2 with whatever gives you a working 'yadm'.)


### Detect if ssh keys have been decrypted, prompt otherwise
# (Note: I've moved this up higher because until this check is done we can't expect anything to work)
if [ ! -f "$HOME/.ssh/id_ed25519" ]; then
    echo "SSH keys seemingly not configured (or I forgot to update the bootstrap script after changing keyfiles)"
    echo "Will now try to run 'yadm decrypt'; password will be required to continue"
    # shellcheck disable=SC3045  # (warning about read -n missing in some POSIX environments)
    read -n 1 -s -r -p "Press any key to continue (or ctrl-c to abort) [in some POSIXes, enter to continue]"
    yadm decrypt
    # TODO This bootstrap command is darwin specific, use yadm conditions to handle linux (with -K)
    echo "ssh key decrypted, loading key, key password will now be needed..."
    ssh-add --apple-use-keychain "$HOME/.ssh/id_ed25519"
fi

# But before we do anything, let's check to see if we're up to date.
# We will check the rev-parse of local and remote and if they don't match we will pull and then re-exec.
yadm fetch

LOCAL=$(yadm rev-parse @)
REMOTE=$(yadm rev-parse '@{u}')
BASE=$(yadm merge-base @ '@{u}')

if [ "$LOCAL" = "$REMOTE" ]; then
    echo "yadm up to date! continuing..."
elif [ "$LOCAL" = "$BASE" ]; then
    echo "yadm is behind, pulling and re-executing"
    echo "(If this is stuck in a loop, check output of yadm rev-parse @ and @{u})"
    yadm pull
    exec yadm bootstrap
    echo "What the... how did we get here???"
    exit 1
elif [ "$REMOTE" = "$BASE" ]; then
    echo "WARNING: You have unpushed commits in yadm."
    echo "I suggest running 'yadm push' to avoid forking history."
    echo "Sleeping for 10s so you can think about it."
    echo "(Feel free to ctrl+c and run it now!)"
    sleep 10
    echo "OK here we go..."
else
    echo "yadm history has diverged between local and remote... you need to fix this."
    echo "I will now refuse to run, but you can edit me in ~/.config/yadm/bootstrap if you want."
    exit 1
fi

# OK, we are up to date. Let's run.

system_type=$(uname -s)

### Install homebrew and .Brewfile, to begin bootstrapping

if [ "$system_type" = "Darwin" ] || [ "$system_type" = "Linux" ]; then
    # install homebrew if it's missing
    if ! command -v brew >/dev/null 2>&1; then
        # Installing homebrew
        # /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
	NONINTERACTIVE=1
	/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    fi

    # arch -arm64 due to weird error: https://stackoverflow.com/questions/74310340
    ARCH_PREFIX=''
    if [ -d "/proc/sys/machdep" ] && [[ $(sysctl -n machdep.cpu.brand_string) =~ "Apple" ]]; then
        ARCH_PREFIX='arch -arm64'
    fi

    if [ -f "$HOME/.Brewfile" ]; then
        # Updating homebrew bundle
        $ARCH_PREFIX brew bundle --global
    fi

    # Upgrading all installed brew packages
    # NOTE: This is something I'm trying out, I may want to disable this later. It might be better to stick with
    # only the `brew bundle --global` above, which does do updates after all.
    $ARCH_PREFIX brew update
    $ARCH_PREFIX brew upgrade
fi


### Set up iterm2 config
if [ "$system_type" = "Darwin" ]; then
  if [ -d "$HOME/.iterm2" ]; then
    echo "Setting iTerm preference folder"
    defaults write com.googlecode.iterm2 PrefsCustomFolder "$HOME/.iterm2"
    defaults write com.googlecode.iterm2 "LoadPrefsFromCustomFolder" -bool true
  fi
fi

### Install asdf versions (asdf itself hopefully installed above)
if
    ! command -v asdf >/dev/null
then
    echo "asdf not found, bootstrapping failed - maybe bootstrapping needs to be added to your system: $system_type"
    echo "see ~/.config/yadm/bootstrap"
    exit 1
else
    # The "|| true"'s here are because of the errexit set above, which these plugins will hit. oh well.
    asdf plugin add python || true
    asdf plugin add kustomize || true
    asdf plugin add nodejs || true
    asdf plugin add golang || true
    asdf plugin add kubectl https://github.com/asdf-community/asdf-kubectl.git || true
    asdf plugin add kubectx https://github.com/virtualstaticvoid/asdf-kubectx.git || true
    asdf plugin add poetry https://github.com/asdf-community/asdf-poetry.git || true
    asdf plugin add ruby https://github.com/asdf-vm/asdf-ruby.git || true
    asdf plugin add terraform https://github.com/asdf-community/asdf-hashicorp.git || true
    asdf plugin add terraform-ls https://github.com/asdf-community/asdf-hashicorp.git || true
    asdf plugin add java https://github.com/halcyon/asdf-java.git || true
    asdf plugin update --all

    # HACK: directly install python first, because poetry depends on it
    asdf install python


    asdf install # (this targets `.tool-versions`, which is linked by yadm)
fi

### Bootstrap sumbodules
# (at time of writing, not used, but could be used some day and shouldn't hurt?)
yadm submodule update --recursive --init


### BUGFIX: 'asdf not found' issue - if homebrew updates asdf, then all asdf shim paths
# break and for some reason `asdf reshim` doesn't fix it. Should file a bug upstream, but for now, we can just blow away
# the shim dir and start over, every time. If you wind up running in to issues with asdf-managed shims, try deleting
# this first... the problem it fixes is RARE
rm -rf "$HOME/.asdf/shims"
asdf reshim


### Bootstrap neovim packer.nvim
# (This will fail if packer hasn't yet bootstrqpped; in which case, just run 'nvim' once and then bootstrap again)
nvim --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'

### Install global npm packages
npm install -g npm
npm install -g yaml-language-server
npm install -g cspell
npm install -g bash-language-server
# npm install -g pyright  # temp disabled
npm install -g neovim  # see :checkhealth
# Finally, do a global update, because I like to live dangerously
npm update -g
asdf reshim nodejs

### Install global python packages
pipx install yamlfix
pipx install bashate
pip install --upgrade pynvim  # see :help provider-python -- and no it can't be pipx
pipx install ruff
pipx install ruff-lsp
# pipx install jedi-language-server  # temp disabled
pipx upgrade-all

### Install global golang packages
go install github.com/rhysd/actionlint/cmd/actionlint@latest
asdf reshim golang

### Provision aws-vault
function setup_aws_vault() {
    local keychain_path="${HOME}/Library/Keychains/aws-vault.keychain-db"

    if [ ! -f "$keychain_path" ]; then
        echo "Setting up aws-vault keychain."
        security create-keychain -p "" aws-vault.keychain-db
    fi

    echo "Making aws-vault keychain visible."
    security list-keychains -s login.keychain-db aws-vault.keychain-db

    echo "Configuring aws-vault keychain settings."
    security set-keychain-settings -u -t 86400 aws-vault.keychain-db

    echo "Unlocking aws-vault keychain."
    security unlock-keychain -p "" aws-vault.keychain-db
}
setup_aws_vault


### Update remote url to use git now that we know ssh is in place
remote_url=$(yadm remote get-url origin)
intended_url="git@github.com:eblume/dotfiles.git"
if [ "$remote_url"  != "$intended_url" ]; then
    echo "Remote set to unexpected url: $remote_url"
    echo "Setting to expected url: $intended_url"
    echo "(This is probably just because you used https and it's a first-time bootstrap and ssh keys weren't loaded, which is fine)"
    yadm remote set-url origin intended_url
    echo "(Otherwise, this probably just broke your setup, lol, sorrynotsorry)"
    echo "(... and btw, because of this fix, you won't need to do https login again)"
fi

### FIN
echo "Bootstrapping complete (note: encrypted files NOT automated, see bootstrap script for info, probably safe to ignore)"
# Note on the above: So, they sort of ARE managed... if my .ssh/id_ed25519 file doesn't exist then it will attempt to
# run yadm decrypt, but otherwise nothing. Why not just always run yadm decrypt? two problems:
#
# 1. yadm decrypt runs gpg decryption which grabs the entire tty to enter a password... very disruptive
# 2. yadm decrypt clobbers any local changes, as far as I can tell
#
# Therefore, just handle yadm encrypt / yadm decrypt yourself whenever changing an encrypted file... I feel like this
# needs to be made better, maybe transcrypt/git-crypt would be better?


# still reading?
# Putting this here makes me a bit happier every time I run bootstrap, and also if it fails then something went wrong
# yaaay
if [[ -x "$HOME/.iterm2/imgcat" ]]
then
    ~/.iterm2/imgcat ~/otis.png
    echo "Otis says: Bootstrapping Complete!" | cowsay | lolcat
else
    echo "Bootstrapping Complete!" | cowsay | lolcat
fi
