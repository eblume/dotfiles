#!/bin/bash

set -o xtrace
set -o nounset
set -o errexit

### TO USE: `yadm bootstrap` - fully idempotent and intended to be run often to get upgrades, etc.
# To bootstrap from 0, you must first install yadm.
# https://yadm.io/docs/install
# On Mac OS, the typical process is:
#  1. /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
#  2. brew install yadm
#  3. yadm clone <DOTFILES REPO HERE>
#  4. yadm bootstrap
#
# (on non-Mac OS, you just need to replace steps 1 and 2 with whatever gives you a working 'yadm'.)

# But before we do anything, let's check to see if we're up to date.
# We will check the rev-parse of local and remote and if they don't match we will pull and then re-exec.
yadm fetch

LOCAL=$(yadm rev-parse @)
REMOTE=$(yadm rev-parse '@{u}')
BASE=$(yadm merge-base @ '@{u}')

if [ "$LOCAL" = "$REMOTE" ]; then
    echo "yadm up to date! continuing..."
elif [ "$LOCAL" = "$BASE" ]; then
    echo "yadm is behind, pulling and re-executing"
    echo "(If this is stuck in a loop, check output of yadm rev-parse @ and @{u})"
    yadm pull
    exec yadm bootstrap
    echo "What the... how did we get here???"
    exit 1
elif [ "$REMOTE" = "$BASE" ]; then
    echo "WARNING: You have unpushed commits in yadm."
    echo "I suggest running 'yadm push' to avoid forking history."
    echo "Sleeping for 10s so you can think about it."
    echo "(Feel free to ctrl+c and run it now!)"
    sleep 10
    echo "OK here we go..."
else
    echo "yadm history has diverged between local and remote... you need to fix this."
    echo "I will now refuse to run, but you can edit me in ~/.config/yadm/bootstrap if you want."
    exit 1
fi

# OK, we are up to date. Let's run.

system_type=$(uname -s)

### Install Nix
if [ ! -d "/nix" ]; then
    echo "Nix not found, installing via Determinate Systems installer."
    echo "(This will require sudo)"
    if ! read -r -p "Press enter to continue"; then
        echo "User cancelled"
        exit 1
    fi
    if [ "$system_type" = "Darwin" ]; then
        curl --proto '=https' --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install
    fi

    echo "Nix installation complete. Bootstrapping will continue, but you may need to re-run it."
fi

### Nix-Darwin flake activation
if [ "$system_type" = "Darwin" ]; then
    echo "Activating Nix-Darwin flake"
    darwin-rebuild switch --flake "$HOME/.config/nix"
fi

### Set up iterm2 config
if [ "$system_type" = "Darwin" ]; then
  if [ -d "$HOME/.iterm2" ]; then
    echo "Setting iTerm preference folder"
    defaults write com.googlecode.iterm2 PrefsCustomFolder "$HOME/.iterm2"
    defaults write com.googlecode.iterm2 "LoadPrefsFromCustomFolder" -bool true
  fi
fi

### Install asdf versions (asdf itself hopefully installed above)
if
    ! command -v asdf >/dev/null
then
    echo "asdf not found, bootstrapping failed - maybe bootstrapping needs to be added to your system: $system_type"
    echo "see ~/.config/yadm/bootstrap"
    exit 1
else
    # The "|| true"'s here are because of the errexit set above, which these plugins will hit. oh well.
    asdf plugin add python || true
    asdf plugin add kustomize || true
    asdf plugin add nodejs || true
    asdf plugin add golang || true
    asdf plugin add kubectl https://github.com/asdf-community/asdf-kubectl.git || true
    asdf plugin add kubectx https://github.com/virtualstaticvoid/asdf-kubectx.git || true
    asdf plugin add ruby https://github.com/asdf-vm/asdf-ruby.git || true
    asdf plugin add terraform https://github.com/asdf-community/asdf-hashicorp.git || true
    asdf plugin add terraform-ls https://github.com/asdf-community/asdf-hashicorp.git || true
    asdf plugin add java https://github.com/halcyon/asdf-java.git || true
    asdf plugin update --all
    asdf install # (this targets `.tool-versions`, which is linked by yadm)
fi

### Bootstrap sumbodules
# (at time of writing, not used, but could be used some day and shouldn't hurt?)
yadm submodule update --recursive --init

### Bootstrap neovim packer.nvim
# (This will fail if packer hasn't yet bootstrqpped; in which case, just run 'nvim' once and then bootstrap again)
nvim --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'

### Install global npm packages
npm install -g npm
npm install -g yaml-language-server
npm install -g cspell
npm install -g bash-language-server
npm install -g readability-cli  # for nb-cli
npm install -g neovim  # see :checkhealth
# Finally, do a global update, because I like to live dangerously
npm update -g
asdf reshim nodejs

### Install global python packages
pip install --upgrade pip
pip install --upgrade pynvim  # see :help provider-python -- and no it can't be pipx

### Install pipx packages
PYTHON=$(asdf which python)
pipx install --python "$PYTHON" yamlfix
pipx install --python "$PYTHON" bashate
pipx install --python "$PYTHON" ruff
pipx install --python "$PYTHON" poetry
pipx install --python "$PYTHON" ruff-lsp
pipx install --python "$PYTHON" llm
pipx install --python "$PYTHON" pyright

echo "If the next command fails, try pipx reinstall-all"

pipx upgrade-all

### Install llm plugins
llm install llm-gpt4all
llm install llama-cpp-python
llm install llm-llama-cpp
# See model installation instructions here:
# https://github.com/simonw/llm-llama-cpp#adding-models

### Install global golang packages
go install github.com/rhysd/actionlint/cmd/actionlint@latest
asdf reshim golang

### Provision aws-vault
function setup_aws_vault() {
    local keychain_path="${HOME}/Library/Keychains/aws-vault.keychain-db"

    if [ ! -f "$keychain_path" ]; then
        echo "Setting up aws-vault keychain."
        security create-keychain -p "" aws-vault.keychain-db
    fi

    echo "Making aws-vault keychain visible."
    security list-keychains -s login.keychain-db aws-vault.keychain-db

    echo "Configuring aws-vault keychain settings."
    security set-keychain-settings -u -t 86400 aws-vault.keychain-db

    echo "Unlocking aws-vault keychain."
    security unlock-keychain -p "" aws-vault.keychain-db
}
# setup_aws_vault
# This has been disabled because it keeps locking my screen on a password prompt, despite the empty password. I suspect
# the issue is that the first time create-keychain is run it prompts for a password anyway, and I naively type in my
# usual password and then that overrides the otherwise empty password. Or maybe it's something else, but the point is
# that I'm not using aws-vault actively right now and I don't want to deal with this. I'll re-enable it if I start
# running in to issues.

### Provision nb-cli with my notebook sync repo
if 
    ! command -v nb >/dev/null
then
    echo "nb not found, bootstrapping failed - maybe bootstrapping needs to be added to your system: $system_type"
    echo "see ~/.config/yadm/bootstrap"
    exit 1
else
    remotes=$(nb remote list)
    if [[ $remotes != *"eblume/notebook"* ]]; then
        echo "Adding eblume/notebook as a remote to nb"
        nb remote set git@github.com:eblume/notebook.git
    fi
fi

### Update remote url to use git now that we know ssh is in place
remote_url=$(yadm remote get-url origin)
intended_url="git@github.com:eblume/dotfiles.git"
if [ "$remote_url"  != "$intended_url" ]; then
    echo "Remote set to unexpected url: $remote_url"
    echo "Setting to expected url: $intended_url"
    echo "(This is probably just because you used https and it's a first-time bootstrap and ssh keys weren't loaded, which is fine)"
    yadm remote set-url origin intended_url
    echo "(Otherwise, this probably just broke your setup, lol, sorrynotsorry)"
    echo "(... and btw, because of this fix, you won't need to do https login again)"
fi

### FIN
echo "Bootstrapping complete"

# still reading?
# Putting this here makes me a bit happier every time I run bootstrap, and also if it fails then something went wrong
# yaaay
if [[ -x "$HOME/.iterm2/imgcat" ]]
then
    # I think there is a bug, I think yadm has imgcat always and it just doesnt do anything outside of iterm, but that's
    # fine too.
    ~/.iterm2/imgcat ~/otis.png
    echo "Otis says: Bootstrapping Complete!" | cowsay | lolcat
else
    echo "Bootstrapping Complete!" | cowsay | lolcat
fi
